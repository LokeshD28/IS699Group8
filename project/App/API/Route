import { NextRequest, NextResponse } from "next/server";
import { prisma } from "@/lib/db";
import { favoriteSchema } from "@/lib/validation";

export async function GET() {
  const rows = await prisma.favoriteRoute.findMany({ where: { userId: "demo" }, orderBy: { createdAt: "desc" } });
  return NextResponse.json({ rows });
}

export async function POST(req: NextRequest) {
  const body = await req.json();
  const parsed = favoriteSchema.safeParse(body);
  if (!parsed.success) return NextResponse.json({ error: parsed.error.format() }, { status: 400 });
  const { origin, destination } = parsed.data;
  const row = await prisma.favoriteRoute.upsert({
    where: { userId_origin_destination: { userId: "demo", origin: origin.toUpperCase(), destination: destination.toUpperCase() } },
    update: {},
    create: { userId: "demo", origin: origin.toUpperCase(), destination: destination.toUpperCase() }
  });
  return NextResponse.json({ row }, { status: 201 });
}

export async function DELETE(req: NextRequest) {
  const { searchParams } = new URL(req.url);
  const id = Number(searchParams.get("id"));
  if (!id) return NextResponse.json({ error: "id required" }, { status: 400 });
  await prisma.favoriteRoute.delete({ where: { id } });
  return NextResponse.json({ ok: true });
}
